{
  "version": 3,
  "sources": ["../../@iconfu/svg-inject/dist/svg-inject.js"],
  "sourcesContent": ["/**\n * SVGInject - Version 1.2.3\n * A tiny, intuitive, robust, caching solution for injecting SVG files inline into the DOM.\n *\n * https://github.com/iconfu/svg-inject\n *\n * Copyright (c) 2018 INCORS, the creators of iconfu.com\n * @license MIT License - https://github.com/iconfu/svg-inject/blob/master/LICENSE\n */\n\n(function(window, document) {\n  // constants for better minification\n  var _CREATE_ELEMENT_ = 'createElement';\n  var _GET_ELEMENTS_BY_TAG_NAME_ = 'getElementsByTagName';\n  var _LENGTH_ = 'length';\n  var _STYLE_ = 'style';\n  var _TITLE_ = 'title';\n  var _UNDEFINED_ = 'undefined';\n  var _SET_ATTRIBUTE_ = 'setAttribute';\n  var _GET_ATTRIBUTE_ = 'getAttribute';\n\n  var NULL = null;\n\n  // constants\n  var __SVGINJECT = '__svgInject';\n  var ID_SUFFIX = '--inject-';\n  var ID_SUFFIX_REGEX = new RegExp(ID_SUFFIX + '\\\\d+', \"g\");\n  var LOAD_FAIL = 'LOAD_FAIL';\n  var SVG_NOT_SUPPORTED = 'SVG_NOT_SUPPORTED';\n  var SVG_INVALID = 'SVG_INVALID';\n  var ATTRIBUTE_EXCLUSION_NAMES = ['src', 'alt', 'onload', 'onerror'];\n  var A_ELEMENT = document[_CREATE_ELEMENT_]('a');\n  var IS_SVG_SUPPORTED = typeof SVGRect != _UNDEFINED_;\n  var DEFAULT_OPTIONS = {\n    useCache: true,\n    copyAttributes: true,\n    makeIdsUnique: true\n  };\n  // Map of IRI referenceable tag names to properties that can reference them. This is defined in\n  // https://www.w3.org/TR/SVG11/linking.html#processingIRI\n  var IRI_TAG_PROPERTIES_MAP = {\n    clipPath: ['clip-path'],\n    'color-profile': NULL,\n    cursor: NULL,\n    filter: NULL,\n    linearGradient: ['fill', 'stroke'],\n    marker: ['marker', 'marker-end', 'marker-mid', 'marker-start'],\n    mask: NULL,\n    pattern: ['fill', 'stroke'],\n    radialGradient: ['fill', 'stroke']\n  };\n  var INJECTED = 1;\n  var FAIL = 2;\n\n  var uniqueIdCounter = 1;\n  var xmlSerializer;\n  var domParser;\n\n\n  // creates an SVG document from an SVG string\n  function svgStringToSvgDoc(svgStr) {\n    domParser = domParser || new DOMParser();\n    return domParser.parseFromString(svgStr, 'text/xml');\n  }\n\n\n  // searializes an SVG element to an SVG string\n  function svgElemToSvgString(svgElement) {\n    xmlSerializer = xmlSerializer || new XMLSerializer();\n    return xmlSerializer.serializeToString(svgElement);\n  }\n\n\n  // Returns the absolute url for the specified url\n  function getAbsoluteUrl(url) {\n    A_ELEMENT.href = url;\n    return A_ELEMENT.href;\n  }\n\n\n  // Load svg with an XHR request\n  function loadSvg(url, callback, errorCallback) {\n    if (url) {\n      var req = new XMLHttpRequest();\n      req.onreadystatechange = function() {\n        if (req.readyState == 4) {\n          // readyState is DONE\n          var status = req.status;\n          if (status == 200) {\n            // request status is OK\n            callback(req.responseXML, req.responseText.trim());\n          } else if (status >= 400) {\n            // request status is error (4xx or 5xx)\n            errorCallback();\n          } else if (status == 0) {\n            // request status 0 can indicate a failed cross-domain call\n            errorCallback();\n          }\n        }\n      };\n      req.open('GET', url, true);\n      req.send();\n    }\n  }\n\n\n  // Copy attributes from img element to svg element\n  function copyAttributes(imgElem, svgElem) {\n    var attribute;\n    var attributeName;\n    var attributeValue;\n    var attributes = imgElem.attributes;\n    for (var i = 0; i < attributes[_LENGTH_]; i++) {\n      attribute = attributes[i];\n      attributeName = attribute.name;\n      // Only copy attributes not explicitly excluded from copying\n      if (ATTRIBUTE_EXCLUSION_NAMES.indexOf(attributeName) == -1) {\n        attributeValue = attribute.value;\n        // If img attribute is \"title\", insert a title element into SVG element\n        if (attributeName == _TITLE_) {\n          var titleElem;\n          var firstElementChild = svgElem.firstElementChild;\n          if (firstElementChild && firstElementChild.localName.toLowerCase() == _TITLE_) {\n            // If the SVG element's first child is a title element, keep it as the title element\n            titleElem = firstElementChild;\n          } else {\n            // If the SVG element's first child element is not a title element, create a new title\n            // ele,emt and set it as the first child\n            titleElem = document[_CREATE_ELEMENT_ + 'NS']('http://www.w3.org/2000/svg', _TITLE_);\n            svgElem.insertBefore(titleElem, firstElementChild);\n          }\n          // Set new title content\n          titleElem.textContent = attributeValue;\n        } else {\n          // Set img attribute to svg element\n          svgElem[_SET_ATTRIBUTE_](attributeName, attributeValue);\n        }\n      }\n    }\n  }\n\n\n  // This function appends a suffix to IDs of referenced elements in the <defs> in order to  to avoid ID collision\n  // between multiple injected SVGs. The suffix has the form \"--inject-X\", where X is a running number which is\n  // incremented with each injection. References to the IDs are adjusted accordingly.\n  // We assume tha all IDs within the injected SVG are unique, therefore the same suffix can be used for all IDs of one\n  // injected SVG.\n  // If the onlyReferenced argument is set to true, only those IDs will be made unique that are referenced from within the SVG\n  function makeIdsUnique(svgElem, onlyReferenced) {\n    var idSuffix = ID_SUFFIX + uniqueIdCounter++;\n    // Regular expression for functional notations of an IRI references. This will find occurences in the form\n    // url(#anyId) or url(\"#anyId\") (for Internet Explorer) and capture the referenced ID\n    var funcIriRegex = /url\\(\"?#([a-zA-Z][\\w:.-]*)\"?\\)/g;\n    // Get all elements with an ID. The SVG spec recommends to put referenced elements inside <defs> elements, but\n    // this is not a requirement, therefore we have to search for IDs in the whole SVG.\n    var idElements = svgElem.querySelectorAll('[id]');\n    var idElem;\n    // An object containing referenced IDs  as keys is used if only referenced IDs should be uniquified.\n    // If this object does not exist, all IDs will be uniquified.\n    var referencedIds = onlyReferenced ? [] : NULL;\n    var tagName;\n    var iriTagNames = {};\n    var iriProperties = [];\n    var changed = false;\n    var i, j;\n\n    if (idElements[_LENGTH_]) {\n      // Make all IDs unique by adding the ID suffix and collect all encountered tag names\n      // that are IRI referenceable from properities.\n      for (i = 0; i < idElements[_LENGTH_]; i++) {\n        tagName = idElements[i].localName; // Use non-namespaced tag name\n        // Make ID unique if tag name is IRI referenceable\n        if (tagName in IRI_TAG_PROPERTIES_MAP) {\n          iriTagNames[tagName] = 1;\n        }\n      }\n      // Get all properties that are mapped to the found IRI referenceable tags\n      for (tagName in iriTagNames) {\n        (IRI_TAG_PROPERTIES_MAP[tagName] || [tagName]).forEach(function (mappedProperty) {\n          // Add mapped properties to array of iri referencing properties.\n          // Use linear search here because the number of possible entries is very small (maximum 11)\n          if (iriProperties.indexOf(mappedProperty) < 0) {\n            iriProperties.push(mappedProperty);\n          }\n        });\n      }\n      if (iriProperties[_LENGTH_]) {\n        // Add \"style\" to properties, because it may contain references in the form 'style=\"fill:url(#myFill)\"'\n        iriProperties.push(_STYLE_);\n      }\n      // Run through all elements of the SVG and replace IDs in references.\n      // To get all descending elements, getElementsByTagName('*') seems to perform faster than querySelectorAll('*').\n      // Since svgElem.getElementsByTagName('*') does not return the svg element itself, we have to handle it separately.\n      var descElements = svgElem[_GET_ELEMENTS_BY_TAG_NAME_]('*');\n      var element = svgElem;\n      var propertyName;\n      var value;\n      var newValue;\n      for (i = -1; element != NULL;) {\n        if (element.localName == _STYLE_) {\n          // If element is a style element, replace IDs in all occurences of \"url(#anyId)\" in text content\n          value = element.textContent;\n          newValue = value && value.replace(funcIriRegex, function(match, id) {\n            if (referencedIds) {\n              referencedIds[id] = 1;\n            }\n            return 'url(#' + id + idSuffix + ')';\n          });\n          if (newValue !== value) {\n            element.textContent = newValue;\n          }\n        } else if (element.hasAttributes()) {\n          // Run through all property names for which IDs were found\n          for (j = 0; j < iriProperties[_LENGTH_]; j++) {\n            propertyName = iriProperties[j];\n            value = element[_GET_ATTRIBUTE_](propertyName);\n            newValue = value && value.replace(funcIriRegex, function(match, id) {\n              if (referencedIds) {\n                referencedIds[id] = 1;\n              }\n                return 'url(#' + id + idSuffix + ')';\n            });\n            if (newValue !== value) {\n              element[_SET_ATTRIBUTE_](propertyName, newValue);\n            }\n          }\n          // Replace IDs in xlink:ref and href attributes\n          ['xlink:href', 'href'].forEach(function(refAttrName) {\n            var iri = element[_GET_ATTRIBUTE_](refAttrName);\n            if (/^\\s*#/.test(iri)) { // Check if iri is non-null and internal reference\n              iri = iri.trim();\n              element[_SET_ATTRIBUTE_](refAttrName, iri + idSuffix);\n              if (referencedIds) {\n                // Add ID to referenced IDs\n                referencedIds[iri.substring(1)] = 1;\n              }\n            }\n          });\n        }\n        element = descElements[++i];\n      }\n      for (i = 0; i < idElements[_LENGTH_]; i++) {\n        idElem = idElements[i];\n        // If set of referenced IDs exists, make only referenced IDs unique,\n        // otherwise make all IDs unique.\n        if (!referencedIds || referencedIds[idElem.id]) {\n          // Add suffix to element's ID\n          idElem.id += idSuffix;\n          changed = true;\n        }\n      }\n    }\n    // return true if SVG element has changed\n    return changed;\n  }\n\n\n  // For cached SVGs the IDs are made unique by simply replacing the already inserted unique IDs with a\n  // higher ID counter. This is much more performant than a call to makeIdsUnique().\n  function makeIdsUniqueCached(svgString) {\n    return svgString.replace(ID_SUFFIX_REGEX, ID_SUFFIX + uniqueIdCounter++);\n  }\n\n\n  // Inject SVG by replacing the img element with the SVG element in the DOM\n  function inject(imgElem, svgElem, absUrl, options) {\n    if (svgElem) {\n      svgElem[_SET_ATTRIBUTE_]('data-inject-url', absUrl);\n      var parentNode = imgElem.parentNode;\n      if (parentNode) {\n        if (options.copyAttributes) {\n          copyAttributes(imgElem, svgElem);\n        }\n        // Invoke beforeInject hook if set\n        var beforeInject = options.beforeInject;\n        var injectElem = (beforeInject && beforeInject(imgElem, svgElem)) || svgElem;\n        // Replace img element with new element. This is the actual injection.\n        parentNode.replaceChild(injectElem, imgElem);\n        // Mark img element as injected\n        imgElem[__SVGINJECT] = INJECTED;\n        removeOnLoadAttribute(imgElem);\n        // Invoke afterInject hook if set\n        var afterInject = options.afterInject;\n        if (afterInject) {\n          afterInject(imgElem, injectElem);\n        }\n      }\n    } else {\n      svgInvalid(imgElem, options);\n    }\n  }\n\n\n  // Merges any number of options objects into a new object\n  function mergeOptions() {\n    var mergedOptions = {};\n    var args = arguments;\n    // Iterate over all specified options objects and add all properties to the new options object\n    for (var i = 0; i < args[_LENGTH_]; i++) {\n      var argument = args[i];\n        for (var key in argument) {\n          if (argument.hasOwnProperty(key)) {\n            mergedOptions[key] = argument[key];\n          }\n        }\n      }\n    return mergedOptions;\n  }\n\n\n  // Adds the specified CSS to the document's <head> element\n  function addStyleToHead(css) {\n    var head = document[_GET_ELEMENTS_BY_TAG_NAME_]('head')[0];\n    if (head) {\n      var style = document[_CREATE_ELEMENT_](_STYLE_);\n      style.type = 'text/css';\n      style.appendChild(document.createTextNode(css));\n      head.appendChild(style);\n    }\n  }\n\n\n  // Builds an SVG element from the specified SVG string\n  function buildSvgElement(svgStr, verify) {\n    if (verify) {\n      var svgDoc;\n      try {\n        // Parse the SVG string with DOMParser\n        svgDoc = svgStringToSvgDoc(svgStr);\n      } catch(e) {\n        return NULL;\n      }\n      if (svgDoc[_GET_ELEMENTS_BY_TAG_NAME_]('parsererror')[_LENGTH_]) {\n        // DOMParser does not throw an exception, but instead puts parsererror tags in the document\n        return NULL;\n      }\n      return svgDoc.documentElement;\n    } else {\n      var div = document.createElement('div');\n      div.innerHTML = svgStr;\n      return div.firstElementChild;\n    }\n  }\n\n\n  function removeOnLoadAttribute(imgElem) {\n    // Remove the onload attribute. Should only be used to remove the unstyled image flash protection and\n    // make the element visible, not for removing the event listener.\n    imgElem.removeAttribute('onload');\n  }\n\n\n  function errorMessage(msg) {\n    console.error('SVGInject: ' + msg);\n  }\n\n\n  function fail(imgElem, status, options) {\n    imgElem[__SVGINJECT] = FAIL;\n    if (options.onFail) {\n      options.onFail(imgElem, status);\n    } else {\n      errorMessage(status);\n    }\n  }\n\n\n  function svgInvalid(imgElem, options) {\n    removeOnLoadAttribute(imgElem);\n    fail(imgElem, SVG_INVALID, options);\n  }\n\n\n  function svgNotSupported(imgElem, options) {\n    removeOnLoadAttribute(imgElem);\n    fail(imgElem, SVG_NOT_SUPPORTED, options);\n  }\n\n\n  function loadFail(imgElem, options) {\n    fail(imgElem, LOAD_FAIL, options);\n  }\n\n\n  function removeEventListeners(imgElem) {\n    imgElem.onload = NULL;\n    imgElem.onerror = NULL;\n  }\n\n\n  function imgNotSet(msg) {\n    errorMessage('no img element');\n  }\n\n\n  function createSVGInject(globalName, options) {\n    var defaultOptions = mergeOptions(DEFAULT_OPTIONS, options);\n    var svgLoadCache = {};\n\n    if (IS_SVG_SUPPORTED) {\n      // If the browser supports SVG, add a small stylesheet that hides the <img> elements until\n      // injection is finished. This avoids showing the unstyled SVGs before style is applied.\n      addStyleToHead('img[onload^=\"' + globalName + '(\"]{visibility:hidden;}');\n    }\n\n\n    /**\n     * SVGInject\n     *\n     * Injects the SVG specified in the `src` attribute of the specified `img` element or array of `img`\n     * elements. Returns a Promise object which resolves if all passed in `img` elements have either been\n     * injected or failed to inject (Only if a global Promise object is available like in all modern browsers\n     * or through a polyfill).\n     *\n     * Options:\n     * useCache: If set to `true` the SVG will be cached using the absolute URL. Default value is `true`.\n     * copyAttributes: If set to `true` the attributes will be copied from `img` to `svg`. Dfault value\n     *     is `true`.\n     * makeIdsUnique: If set to `true` the ID of elements in the `<defs>` element that can be references by\n     *     property values (for example 'clipPath') are made unique by appending \"--inject-X\", where X is a\n     *     running number which increases with each injection. This is done to avoid duplicate IDs in the DOM.\n     * beforeLoad: Hook before SVG is loaded. The `img` element is passed as a parameter. If the hook returns\n     *     a string it is used as the URL instead of the `img` element's `src` attribute.\n     * afterLoad: Hook after SVG is loaded. The loaded `svg` element and `svg` string are passed as a\n     *     parameters. If caching is active this hook will only get called once for injected SVGs with the\n     *     same absolute path. Changes to the `svg` element in this hook will be applied to all injected SVGs\n     *     with the same absolute path. It's also possible to return an `svg` string or `svg` element which\n     *     will then be used for the injection.\n     * beforeInject: Hook before SVG is injected. The `img` and `svg` elements are passed as parameters. If\n     *     any html element is returned it gets injected instead of applying the default SVG injection.\n     * afterInject: Hook after SVG is injected. The `img` and `svg` elements are passed as parameters.\n     * onAllFinish: Hook after all `img` elements passed to an SVGInject() call have either been injected or\n     *     failed to inject.\n     * onFail: Hook after injection fails. The `img` element and a `status` string are passed as an parameter.\n     *     The `status` can be either `'SVG_NOT_SUPPORTED'` (the browser does not support SVG),\n     *     `'SVG_INVALID'` (the SVG is not in a valid format) or `'LOAD_FAILED'` (loading of the SVG failed).\n     *\n     * @param {HTMLImageElement} img - an img element or an array of img elements\n     * @param {Object} [options] - optional parameter with [options](#options) for this injection.\n     */\n    function SVGInject(img, options) {\n      options = mergeOptions(defaultOptions, options);\n\n      var run = function(resolve) {\n        var allFinish = function() {\n          var onAllFinish = options.onAllFinish;\n          if (onAllFinish) {\n            onAllFinish();\n          }\n          resolve && resolve();\n        };\n\n        if (img && typeof img[_LENGTH_] != _UNDEFINED_) {\n          // an array like structure of img elements\n          var injectIndex = 0;\n          var injectCount = img[_LENGTH_];\n\n          if (injectCount == 0) {\n            allFinish();\n          } else {\n            var finish = function() {\n              if (++injectIndex == injectCount) {\n                allFinish();\n              }\n            };\n\n            for (var i = 0; i < injectCount; i++) {\n              SVGInjectElement(img[i], options, finish);\n            }\n          }\n        } else {\n          // only one img element\n          SVGInjectElement(img, options, allFinish);\n        }\n      };\n\n      // return a Promise object if globally available\n      return typeof Promise == _UNDEFINED_ ? run() : new Promise(run);\n    }\n\n\n    // Injects a single svg element. Options must be already merged with the default options.\n    function SVGInjectElement(imgElem, options, callback) {\n      if (imgElem) {\n        var svgInjectAttributeValue = imgElem[__SVGINJECT];\n        if (!svgInjectAttributeValue) {\n          removeEventListeners(imgElem);\n\n          if (!IS_SVG_SUPPORTED) {\n            svgNotSupported(imgElem, options);\n            callback();\n            return;\n          }\n          // Invoke beforeLoad hook if set. If the beforeLoad returns a value use it as the src for the load\n          // URL path. Else use the imgElem's src attribute value.\n          var beforeLoad = options.beforeLoad;\n          var src = (beforeLoad && beforeLoad(imgElem)) || imgElem[_GET_ATTRIBUTE_]('src');\n\n          if (!src) {\n            // If no image src attribute is set do no injection. This can only be reached by using javascript\n            // because if no src attribute is set the onload and onerror events do not get called\n            if (src === '') {\n              loadFail(imgElem, options);\n            }\n            callback();\n            return;\n          }\n\n          // set array so later calls can register callbacks\n          var onFinishCallbacks = [];\n          imgElem[__SVGINJECT] = onFinishCallbacks;\n\n          var onFinish = function() {\n            callback();\n            onFinishCallbacks.forEach(function(onFinishCallback) {\n              onFinishCallback();\n            });\n          };\n\n          var absUrl = getAbsoluteUrl(src);\n          var useCacheOption = options.useCache;\n          var makeIdsUniqueOption = options.makeIdsUnique;\n          \n          var setSvgLoadCacheValue = function(val) {\n            if (useCacheOption) {\n              svgLoadCache[absUrl].forEach(function(svgLoad) {\n                svgLoad(val);\n              });\n              svgLoadCache[absUrl] = val;\n            }\n          };\n\n          if (useCacheOption) {\n            var svgLoad = svgLoadCache[absUrl];\n\n            var handleLoadValue = function(loadValue) {\n              if (loadValue === LOAD_FAIL) {\n                loadFail(imgElem, options);\n              } else if (loadValue === SVG_INVALID) {\n                svgInvalid(imgElem, options);\n              } else {\n                var hasUniqueIds = loadValue[0];\n                var svgString = loadValue[1];\n                var uniqueIdsSvgString = loadValue[2];\n                var svgElem;\n\n                if (makeIdsUniqueOption) {\n                  if (hasUniqueIds === NULL) {\n                    // IDs for the SVG string have not been made unique before. This may happen if previous\n                    // injection of a cached SVG have been run with the option makedIdsUnique set to false\n                    svgElem = buildSvgElement(svgString, false);\n                    hasUniqueIds = makeIdsUnique(svgElem, false);\n\n                    loadValue[0] = hasUniqueIds;\n                    loadValue[2] = hasUniqueIds && svgElemToSvgString(svgElem);\n                  } else if (hasUniqueIds) {\n                    // Make IDs unique for already cached SVGs with better performance\n                    svgString = makeIdsUniqueCached(uniqueIdsSvgString);\n                  }\n                }\n\n                svgElem = svgElem || buildSvgElement(svgString, false);\n\n                inject(imgElem, svgElem, absUrl, options);\n              }\n              onFinish();\n            };\n\n            if (typeof svgLoad != _UNDEFINED_) {\n              // Value for url exists in cache\n              if (svgLoad.isCallbackQueue) {\n                // Same url has been cached, but value has not been loaded yet, so add to callbacks\n                svgLoad.push(handleLoadValue);\n              } else {\n                handleLoadValue(svgLoad);\n              }\n              return;\n            } else {\n              var svgLoad = [];\n              // set property isCallbackQueue to Array to differentiate from array with cached loaded values\n              svgLoad.isCallbackQueue = true;\n              svgLoadCache[absUrl] = svgLoad;\n            }\n          }\n\n          // Load the SVG because it is not cached or caching is disabled\n          loadSvg(absUrl, function(svgXml, svgString) {\n            // Use the XML from the XHR request if it is an instance of Document. Otherwise\n            // (for example of IE9), create the svg document from the svg string.\n            var svgElem = svgXml instanceof Document ? svgXml.documentElement : buildSvgElement(svgString, true);\n\n            var afterLoad = options.afterLoad;\n            if (afterLoad) {\n              // Invoke afterLoad hook which may modify the SVG element. After load may also return a new\n              // svg element or svg string\n              var svgElemOrSvgString = afterLoad(svgElem, svgString) || svgElem;\n              if (svgElemOrSvgString) {\n                // Update svgElem and svgString because of modifications to the SVG element or SVG string in\n                // the afterLoad hook, so the modified SVG is also used for all later cached injections\n                var isString = typeof svgElemOrSvgString == 'string';\n                svgString = isString ? svgElemOrSvgString : svgElemToSvgString(svgElem);\n                svgElem = isString ? buildSvgElement(svgElemOrSvgString, true) : svgElemOrSvgString;\n              }\n            }\n\n            if (svgElem instanceof SVGElement) {\n              var hasUniqueIds = NULL;\n              if (makeIdsUniqueOption) {\n                hasUniqueIds = makeIdsUnique(svgElem, false);\n              }\n\n              if (useCacheOption) {\n                var uniqueIdsSvgString = hasUniqueIds && svgElemToSvgString(svgElem);\n                // set an array with three entries to the load cache\n                setSvgLoadCacheValue([hasUniqueIds, svgString, uniqueIdsSvgString]);\n              }\n\n              inject(imgElem, svgElem, absUrl, options);\n            } else {\n              svgInvalid(imgElem, options);\n              setSvgLoadCacheValue(SVG_INVALID);\n            }\n            onFinish();\n          }, function() {\n            loadFail(imgElem, options);\n            setSvgLoadCacheValue(LOAD_FAIL);\n            onFinish();\n          });\n        } else {\n          if (Array.isArray(svgInjectAttributeValue)) {\n            // svgInjectAttributeValue is an array. Injection is not complete so register callback\n            svgInjectAttributeValue.push(callback);\n          } else {\n            callback();\n          }\n        }\n      } else {\n        imgNotSet();\n      }\n    }\n\n\n    /**\n     * Sets the default [options](#options) for SVGInject.\n     *\n     * @param {Object} [options] - default [options](#options) for an injection.\n     */\n    SVGInject.setOptions = function(options) {\n      defaultOptions = mergeOptions(defaultOptions, options);\n    };\n\n\n    // Create a new instance of SVGInject\n    SVGInject.create = createSVGInject;\n\n\n    /**\n     * Used in onerror Event of an `<img>` element to handle cases when the loading the original src fails\n     * (for example if file is not found or if the browser does not support SVG). This triggers a call to the\n     * options onFail hook if available. The optional second parameter will be set as the new src attribute\n     * for the img element.\n     *\n     * @param {HTMLImageElement} img - an img element\n     * @param {String} [fallbackSrc] - optional parameter fallback src\n     */\n    SVGInject.err = function(img, fallbackSrc) {\n      if (img) {\n        if (img[__SVGINJECT] != FAIL) {\n          removeEventListeners(img);\n\n          if (!IS_SVG_SUPPORTED) {\n            svgNotSupported(img, defaultOptions);\n          } else {\n            removeOnLoadAttribute(img);\n            loadFail(img, defaultOptions);\n          }\n          if (fallbackSrc) {\n            removeOnLoadAttribute(img);\n            img.src = fallbackSrc;\n          }\n        }\n      } else {\n        imgNotSet();\n      }\n    };\n\n    window[globalName] = SVGInject;\n\n    return SVGInject;\n  }\n\n  var SVGInjectInstance = createSVGInject('SVGInject');\n\n  if (typeof module == 'object' && typeof module.exports == 'object') {\n    module.exports = SVGInjectInstance;\n  }\n})(window, document);"],
  "mappings": "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",
  "names": ["window", "document", "options", "svgLoad"]
}
